// 作用域链

function bar() {

}

function foo() {
  var myName = '蜗牛'
  bar()
}


var myName = "周老板"

foo()


// 词法作用域：是根据代码的位置来决定的，不是看函数怎么调用的！！

// 要看结果是多少，就要看 作用域链 是怎么走的，要知道作用域链怎么走，就要靠词法作用域是怎么嵌套的

// 块级作用域中变量的查找

// 闭包定义：在js中，根据词法作用域的规则，内部函数总是可以访问外部函数中声明的变量，
// 当通过调用一个外部函数返回一个内部函数后即使该外部函数已经执行结束，但是内部函数
// 引用外部函数的变量依然保存在内存中，我们称这些变量为闭包的产物，这些变量的集合就称之为闭包



// 闭包是怎么回收的
// 1. 如果引用闭包的函数是一个全局变量，那么这个闭包就会一直存在直到页面关闭
// 2. 如果引用闭包的函数是个局部变量，等函数销毁后，在下一次javascript引擎执行垃圾回收时，
// 判断闭包不再使用了才被垃圾回收
